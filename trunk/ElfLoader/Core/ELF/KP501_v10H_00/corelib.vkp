;CORE.LIB
;KP501 v10H_00

;Это раскрытй файл библиотекки прошивочных ф-ий, применяется к core.lib
;при добавлении новых

+0
#pragma enable old_equal_ff

;000:              ; 000: unsigned int *__swihook_getlib();
;004:              ; 001: int __swihook_setfunc(unsigned short swinum, unsigned int address);
;008:              ; 002: unsigned int __swihook_getfunc(unsigned short swinum);
;00C:              ; 003: int __swihook_clearfunc(unsigned short swinum);

;010:              ; 004: int __ejapi_addapi(char *path);
;014:              ; 005: int __ejapi_removeapi(int handle);
;018:              ; 006: EJAPI_ITEM *__ejapi_getbase();
;01C:              ; 007: int __ejapi_getbasesize();

;020:              ; 008: unsigned char  __amem_setbyte(unsigned long address, unsigned char byte);
;024:              ; 009: unsigned short __amem_sethwrd(unsigned long address, unsigned short hwrd);
;028:              ; 00A: unsigned long  __amem_setword(unsigned long address, unsigned long word);

;02C:              ; 00B: int __elf_load(char *filename, void *param1, void *param2, void *param3, unsigned int *start, unsigned int *ret);
;030:              ; 00C: int __elf_unload(void *base);

;034:              ; 00D: void __core_lclear();
;038:              ; 00E: void __core_lprintf(const char *format, ...);

0040: 0x46FE1199   ; 010: int fs_open(const char *file_path, unsigned short mode);
0044: 0x46FD406D   ; 011: int fs_read(int handle, const void *buffer, int size);
0048: 0x46FDA00D   ; 012: int fs_write(int handle, const void *buffer, int size);
004C: 0x46FDA059   ; 013: int fs_seek(int handle, unsigned char mode, int offset);
0050: 0x46FE1245   ; 014: int fs_close(int handle);
0054: 0x46FCF279   ; 015: int fs_unlink(const char *file_path);

0058: 0x46FBF2F9   ; 016: int fs_mkdir(const char *dir_path);
005C: 0x46FBF39D   ; 017: int fs_rmdir(const char *dir_path);

0060: 0x46FC6F21   ; 018: int fs_opendir(const char *dir_path);
0064: 0x46FC6FF9   ; 019: int fs_readdir(int handle, FS_INFO *entry);
0068: 0x46FC6FC5   ; 01A: int fs_closedir(int handle);

006C: 0x46FBF441   ; 01B: int fs_getinfo(const char *fs_path, FS_INFO *info);
0070: 0x46FC9A81   ; 01C: int fs_rename(const char *fs_path, const char *newname);

0080: 0x46577225   ; 020: void *mem_malloc(unsigned int size);
0084: 0x4657723F   ; 021: void  mem_free(void *ptr);
0088: 0x46577255   ; 022: void *mem_realloc(void *ptr, unsigned int size);
008C: 0x46577273   ; 023: void *mem_calloc(unsigned int n, unsigned int size);
0090: 0x46577291   ; 024: void *mem_zmalloc(unsigned int size);
0094: 0x465772D1   ; 025: unsigned int mem_totalsize();
0098: 0x465772DB   ; 026: unsigned int mem_usedsize();
009C: 0x465772E5   ; 027: unsigned int mem_freesize();
00A0: 0x46577221   ; 028: void *mem_getbase();

;0C0:              ; 030: unsigned int **__pxeapi_getlib()
;0C4:              ; 031: void __exekiller_run(void *exe);

0180: 0x4092AB60   ; 8060: unsigned int *const_getscreenbuffer();

;200:              ; 080: int dlopen(const char *name);
;204:              ; 081: Elf32_Word dlsym(int handle, const char *name);
;208:              ; 082: int dlclose(int handle);
;20C:              ; 083: const char *dlerror();
;210:              ; 084: int dlcache_clean();
;214:              ; 085: void *SHARED_TOP();
;218:              ; 086: int setenv(const char *name, const char *value, int replace);
;21C:              ; 087: int unsetenv(const char *name);
;220:              ; 088: int clearenv(void);
;224:              ; 089: char **environ();
;228:              ; 08A: Elf32_Exec* elfopen(const char* filename);
;22C:              ; 08B: int elfclose(Elf32_Exec* ex);
;230:              ; 08C: unsigned int calc_binary_size(Elf32_Exec *ex, Elf32_Phdr *phdrs);
;234:              ; 08D: int LoadSections(Elf32_Exec* ex);
;238:              ; 08D: int DoRelocation(Elf32_Exec* ex, Elf32_Dyn* dyn_sect, Elf32_Phdr* phdr);

0480: 0x465548E5   ; 120: int LGOS_Timer_Create(LGOS_TIMER *timer, char *name);
0484: 0x465D9FBD   ; 121: int LGOS_Timer_Delete(LGOS_TIMER *timer);
0488: 0x46572555   ; 122: int LGOS_Timer_SetLoop(LGOS_TIMER *timer, int isloop);
048C: 0x465549D1   ; 123: int LGOS_Timer_SetProc(LGOS_TIMER *timer, void (*routune)(int arg), int arg);
0490: 0x46562075   ; 124: int LGOS_Timer_SetPeriod(LGOS_TIMER *timer, int init_period, int loop_period);
0494: 0x46554819   ; 125: int LGOS_Timer_Start(LGOS_TIMER *timer);
0498: 0x46554A6D   ; 126: int LGOS_Timer_Stop(LGOS_TIMER *timer);
049C: 0x464ED6A1   ; 127: int LGOS_Timer_IsStarted(LGOS_TIMER *timer, unsigned int *is_started);

0C00: 0x469F446C   ; 300: NU_Create_Task
0C04: 0x469FD744   ; 301: NU_Delete_Task
0C08: 0xFFFFFFFF   ; 302: NU_Reset_Task
0C0C: 0x469D307C   ; 303: NU_Terminate_Task
0C10: 0x469D3144   ; 304: NU_Resume_Task
0C14: 0x469A887C   ; 305: NU_Suspend_Task
0C18: 0x469FD78C   ; 306: NU_Relinquish
0C1C: 0x469924A8   ; 307: NU_Sleep
0C20: 0xFFFFFFFF   ; 308: NU_Change_Priority
0C24: 0xFFFFFFFF   ; 309: NU_Change_Preemption
0C28: 0xFFFFFFFF   ; 30A: NU_Change_Time_Slice
0C2C: 0xFFFFFFFF   ; 30B: NU_Check_Stack
0C30: 0xFFFF163C   ; 30C: NU_Current_Task_Pointer
0C34: 0x469E3294   ; 30D: NU_Established_Tasks
0C38: 0xFFFFFFFF   ; 30E: NU_Task_Information
0C3C: 0x469E32A4   ; 30F: NU_Task_Pointers

#pragma disable old_equal_ff
+0


;locale=Russian_Russia.1251
;------------------------- end -------------------------

;locale=Russian_Russia.1251